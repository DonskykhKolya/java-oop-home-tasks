package com.shpach.studgroup;

import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;

import com.shpach.studgroup.Student.Grade;

public class ClassGroup implements VoenKom {
	private String className = "";
	private Student.Grade grade;
	private Student[] students = new Student[10];

	public ClassGroup(String className, Grade grade) {
		super();
		this.className = className;
		this.grade = grade;
	}

	public ClassGroup() {
		super();
	}

	public String getClassName() {
		return className;
	}

	public void setClassName(String className) {
		this.className = className;
	}

	public Student.Grade getGrade() {
		return grade;
	}

	public static class ClassFullExeption extends Exception {

		@Override
		public String getMessage() {
			return "Class is full";
		}
	}

	public static class NullStudentExeption extends Exception {

		@Override
		public String getMessage() {
			return "Input param is null";
		}
	}

	public static class StudentAllreadyExistExeption extends Exception {

		@Override
		public String getMessage() {
			return "Student allready exist";
		}
	}

	public static class WrongGradeExeption extends Exception {

		@Override
		public String getMessage() {
			return "Wrong grade";
		}
	}

	public static class StudentDoesNotExistExeption extends Exception {

		@Override
		public String getMessage() {
			return "Student doesn't exist";
		}
	}

	public void addStudent(Student st)
			throws ClassFullExeption, NullStudentExeption, StudentAllreadyExistExeption, WrongGradeExeption {
		int freeIndx = -1;
		if (st == null)
			throw new NullStudentExeption();
		if (st.getGrade() != this.grade)
			throw new WrongGradeExeption();
		for (int i = 0; i < this.students.length; i++) {
			if (this.students[i] == null) {
				freeIndx = i;
			} else {
				if (this.students[i].equals(st))
					throw new StudentAllreadyExistExeption();
			}
		}
		if (freeIndx != -1) {
			this.students[freeIndx] = st;
			st.setClassName(this.getClassName());
		} else {
			throw new ClassFullExeption();
		}

	}

	public void deleteStudent(Student st) throws StudentDoesNotExistExeption, NullStudentExeption {
		int freeIndx = -1;
		if (st == null)
			throw new NullStudentExeption();
		for (int i = 0; i < this.students.length; i++) {
			if (this.students[i].equals(st))
				freeIndx = i;
		}
		if (freeIndx != -1) {
			this.students[freeIndx] = null;
		} else {
			throw new StudentDoesNotExistExeption();
		}
	}

	public Student getStudentBySurName(String name) {
		for (Student student : students) {
			if (student != null) {
				if (student.getSurName() == name)
					return student;
			}
		}
		return null;
	}

	private static Comparator<Student> nameComparator = new Comparator<Student>() {

		@Override
		public int compare(Student e1, Student e2) {
			return e1.getName().compareTo(e2.getName());
		}
	};
	private static Comparator<Student> ageComparator = new Comparator<Student>() {

		@Override
		public int compare(Student e1, Student e2) {
			return e1.getAge() - e2.getAge();
		}
	};
	private static Comparator<Student> surNameComparator = new Comparator<Student>() {

		@Override
		public int compare(Student e1, Student e2) {
			return e1.getSurName().compareTo(e2.getSurName());
		}
	};

	public void sortByName() {
		Arrays.sort(this.students, ClassGroup.nameComparator);
	}

	public void sortBySurName() {
		Arrays.sort(this.students, ClassGroup.surNameComparator);
	}

	public void sortByAge() {
		Arrays.sort(this.students, ClassGroup.ageComparator);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("ClassGroup" + System.lineSeparator() + "className=" + className + System.lineSeparator() + "grade="
				+ grade + System.lineSeparator());
		sb.append("Students list:" + System.lineSeparator());
		// String[] st = sortStudents();

		for (int i = 0; i < this.students.length; i++) {
			sb.append((i + 1) + ") ").append(this.students[i]).append(System.lineSeparator());
		}
		return sb.toString();
	}

	public void sort() {
		Arrays.sort(students);

	}

	@Override
	public Student[] getRecruts() {
		int[] indx = new int[students.length];
		int j = 0;
		for (int i = 0; i < students.length; i++) {
			if (students[i] != null) {
				if (students[i].getAge() > 18 && students[i].getSex()==Human.Sex.mail) {
					indx[j++] = i + 1;
				}
			}
		}
		Student[] res = new Student[j];
		for (int i = 0; i < j; i++) {
			res[i] = students[indx[i] - 1];

		}
		return res;
	}

}
