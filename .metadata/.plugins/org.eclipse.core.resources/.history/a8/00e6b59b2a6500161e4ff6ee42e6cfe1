package com.shpach.filescopy;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import com.shpach.filescopy.IOUtils.InputParamNotDirExeption;

public class Main {

	public static void main(String[] args) {
		 try {
			IOUtils.MultyTreadFileCopy(new File("1.csv"), new File("2.txt"));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		/*
		File file=new File("1.csv");
		File fileTo=new File("2.txt");
		if (!fileTo.exists())
			try {
				fileTo.createNewFile();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		try {
			long mid=file.length()/2;
			IOUtils.copyFileAsync(file, new File("2.txt"), 0L, mid);
			IOUtils.copyFileAsync(file, new File("2.txt"), mid+1, file.length());
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		*/
		/*
		File file =new File("1.csv");
		try {
			MakeIrregularFile.makeIrregularFileFromCsv(file);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		*/
		/*
		//Copy files with filter extention
		MyFileFilter mFF = new MyFileFilter("doc", "csv");
		File folderFrom = new File("a");
		File folderTo = new File("b");
		if (!folderTo.exists())
			folderTo.mkdirs();
		
			//IOUtils.copyFiles(folderFrom, folderTo, mFF);
			try {
				MultyThreadCopy mCopy=new MultyThreadCopy(folderFrom, folderTo, mFF);
			} catch (InputParamNotDirExeption e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		
		
		//save similar words in different files
		try {
			IOUtils.saveSimilarInTextFiles(new File("similar", "a.txt"), new File("similar", "b.txt"), new File("similar", "c.txt"));
		} catch (FileNotFoundException e) {
			System.out.println(e);
		} catch (IOException e) {
			System.out.println(e);
		}
		
*/
	}

}
